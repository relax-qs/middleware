package ${managerImplPackage};

import com.lark.middleware.model.query.PageResult;
import ${doPackage}.${className}${doSuffix};
import ${queryPackage}.${className}${queryPrefix};
import ${mapperExtPackage}.${className}${extMapperSuffix};
import ${managerPackage}.${className}${managerSuffix};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;


/**
 * Manager for ${className}.
 */

public class ${className}${managerImplSuffix} implements ${className}${managerSuffix}{
    protected Logger log = LoggerFactory.getLogger(this.getClass());

    #set($managerMapperName= "${propertyName}${extMapperSuffix}")

    @Autowired
    protected ${className}${extMapperSuffix} ${managerMapperName};
    /**
     * query count by query condition.
     */
    @Override
    public int countBy${queryPrefix}(${className}${queryPrefix} ${queryPrefix.toLowerCase()}){
        return ${managerMapperName}.countBy${queryPrefix}(${queryPrefix.toLowerCase()});
    }

    /**
     * delete by query condition.
     */
    @Override
    public int deleteBy${queryPrefix}(${className}${queryPrefix} ${queryPrefix.toLowerCase()}){
        return ${managerMapperName}.deleteBy${queryPrefix}(${queryPrefix.toLowerCase()});
    }

    /**
     * delete by primary key.
     */
    @Override
    public int deleteByPrimaryKey(Long id){
        return ${managerMapperName}.deleteByPrimaryKey(id);
    }

    /**
     * insert selective.
     */
    @Override
    public int insertSelective(${className}${doSuffix} record){
        // 兼容外部指定id
        ${tableInfo.getIdColumn().javaType} id = record.${tableInfo.getIdColumn().getMethod}();
        int count =  ${managerMapperName}.insertSelective(record);
        if(null != id){
            record.${tableInfo.getIdColumn().setMethod}(id);
        }
        return count;

    }

    /**
     * select by query condition.
     */
    @Override
    public List<${className}${doSuffix}> selectBy${queryPrefix}(${className}${queryPrefix} ${queryPrefix.toLowerCase()}){
        return ${managerMapperName}.selectBy${queryPrefix}(${queryPrefix.toLowerCase()});
    }

    /**
     * select by query condition with page.
    */
    @Override
    public PageResult<${className}${doSuffix}> selectBy${queryPrefix}WithPage(${className}${queryPrefix} ${queryPrefix.toLowerCase()}) {
        PageResult<${className}${doSuffix}> result = new PageResult<>();
        result.setPageSize(query.getPageSize());
        result.setPageNo(query.getPageNo());
        result.setTotalCount(this.countBy${queryPrefix}(${queryPrefix.toLowerCase()}));
        result.setResult(this.selectBy${queryPrefix}(${queryPrefix.toLowerCase()}));
        return result;
    }

    /**
     * select by primary key.
     */
    @Override
    public ${className}${doSuffix} selectByPrimaryKey(Long id){
        return ${managerMapperName}.selectByPrimaryKey(id);
    }

     /**
     * 更新必须设置pageSize进行更新保护,如果没有设置默认更新1条
     * 第几页没有意义,mysql 不支持
     * update by query condition selective.
     */
    @Override
    public int updateBy${queryPrefix}Selective( ${className}${doSuffix} record,  ${className}${queryPrefix} ${queryPrefix.toLowerCase()}){
        if(null == ${queryPrefix.toLowerCase()}.getPageSize()){
            ${queryPrefix.toLowerCase()}.setPageSize(1);
        }
        return ${managerMapperName}.updateBy${queryPrefix}Selective(record,  ${queryPrefix.toLowerCase()});
    }

    /**
     *更新必须设置pageSize进行更新保护,如果没有设置默认更新1条
     *第几页没有意义,mysql 不支持
     * update by query condition.
     */
    @Override
    public int updateBy${queryPrefix}( ${className}${doSuffix} record,  ${className}${queryPrefix} ${queryPrefix.toLowerCase()}){
        if(null == ${queryPrefix.toLowerCase()}.getPageSize()){
            ${queryPrefix.toLowerCase()}.setPageSize(1);
        }
        return ${managerMapperName}.updateBy${queryPrefix}(record, ${queryPrefix.toLowerCase()});
    }

    /**
     * update by primary key selective.
     */
    @Override
    public int updateByPrimaryKeySelective(${className}${doSuffix} record){
        return ${managerMapperName}.updateByPrimaryKeySelective(record);
    }
    /**
    * update by primary key selective.
    */
    @Override
    public int updateByPrimaryKey(${className}${doSuffix} record){
        return ${managerMapperName}.updateByPrimaryKey(record);
    }
}