package ${queryPackage};


import com.lark.middleware.model.query.BaseQuery;
import com.lark.middleware.model.query.BaseCriteria;
import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import java.io.Serializable;

import java.util.Date;
import java.util.List;

public class ${className}${queryPrefix} extends BaseQuery implements Serializable {
    private static final long serialVersionUID = 1L;

    public ${className}${queryPrefix}() {
        super();
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        super.oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This class corresponds to the database table ${tableName}
     */
    protected abstract static class GeneratedCriteria extends BaseCriteria {

        protected GeneratedCriteria() {
            super();
        }

#foreach($item in $tableInfo.columns)
#set($colName=$item.propName.substring(0, 1).toUpperCase() + $item.propName.substring(1))
        /**
         * ${item.comment}
         */
        public Criteria and${colName}IsNull() {
            addCriterion("${item.columnName} is null");
            return (Criteria) this;
        }

        public Criteria and${colName}IsNotNull() {
            addCriterion("${item.columnName} is not null");
            return (Criteria) this;
        }

        public Criteria and${colName}EqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} =", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotEqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} <>", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}GreaterThan(${item.javaType} value) {
            addCriterion("${item.columnName} >", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}GreaterThanOrEqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} >=", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}LessThan(${item.javaType} value) {
            addCriterion("${item.columnName} <", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}LessThanOrEqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} <=", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}Like(${item.javaType} value) {
            addCriterion("${item.columnName} like", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotLike(${item.javaType} value) {
            addCriterion("${item.columnName} not like", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}In(List<${item.javaType}> values) {
            addCriterion("${item.columnName} in", values, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotIn(List<${item.javaType}> values) {
            addCriterion("${item.columnName} not in", values, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}Between(${item.javaType} value1, ${item.javaType} value2) {
            addCriterion("${item.columnName} between", value1, value2, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotBetween(${item.javaType} value1, ${item.javaType} value2) {
            addCriterion("${item.columnName} not between", value1, value2, "${item.propName}");
            return (Criteria) this;
        }

#end
    }

    /**
     * This class corresponds to the database table ${tableName}
    */
    public  static class Criteria extends GeneratedCriteria{
        protected Criteria() {
            super();
        }
    }



    @Override
    public String toString(){
        return ReflectionToStringBuilder.toString(this, ToStringStyle.DEFAULT_STYLE);
    }
}